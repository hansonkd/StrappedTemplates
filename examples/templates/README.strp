Strapped Templates
=================

General Purpose Templates in Haskell.

Objective
=========

The objective of this project is to build an easy-to-use, flexible, general purpose templating language. 

Strapped isn't necessarily geared towards HTML. For example, this README and cabal file is written in Strapped (see `examples/templates/README.strp` and `examples/make_readme.hs`).

As of `0.2` Strapped now accepts custom parsers and template tags as part of the `StrappedConfig` object. 

Quick Start
===========

### Syntax
Strapped renders variables to text with this tag:
{$ raw $}
`${ _ }`
{$ endraw $}

Strapped includes these tag blocks to control flow:
{$ raw $}
 `{$ inherits _ $}` `{$ let _ = _ $}` `{$ includes _ $}` `{$ for _ in _ $}{$ endfor $}` `{$ if _ $}{$ endif $}` `{% block _ $}{$ endblock $}` `{$ comment $}{$ endcomment $}` `{$ raw $}{$ endraw $}{$ endraw $}`

### Expressions
Strapped gives you a limited number of expressions you can define in your template. Improving this is a core focus of future releases.

Currently expressions include Bools, Lists, 0 arity functions, single arity functions, strings, ints, floats. 

{$ raw $}
```
${ takesAList ["string", 1, 1.0, [True, zeroArityFunc, lookupVar], (someFunc False)] }
```
{$ endraw $}

## Example

Here is an example of the tags being used together:

```html
${ fromFile "examples/templates/base_simple.strp" }
```

### Rendering

Strapped templates need two things to render. A `TemplateStore` and an `InputBucket m`. 

`TemplateStore` is just function that take a String and returns a template.

`InputBucket m` is a list of maps that get iterated through to find variables.

The easiest way to create a template store is to use one of the built in functions. The `templateStoreFromDirectory` loads and parses the templates upfront. The TemplateStore datatype is flexible enough (executes in `IO`) that you could add a dynamically loading TemplateStore if you wanted.

```haskell
${ fromFile "examples/base_example.hs" }
```

Template Lanaguage Features
===========================

### Functions
Strapped lets you build and pass functions in your monad context.

A function takes a list of `Literal` and produces a Literal in an `ErrorT m` context.


```haskell
instance Renderable UTCTime where
  renderOutput _ c = showToBuilder c

instance Renderable NominalDiffTime where
  renderOutput _ c = showToBuilder c

bucket = bucketFromList [
          ("ioTime", Func (\_ -> (liftIO $ getCurrentTime) >>= (\c -> return $ LitDyn $ c) )),
          ("diffTime", Func diffTime),
        ]

diffTime (LitList ((LitDyn a):(LitDyn b):_)) = do
  case do {t1 <- cast a; t2 <- cast b; return (t1, t2)} of
    Just (time1, time2) -> return $ LitDyn (diffUTCTime time1 time2)
    Nothing -> return $ LitText $ T.pack "Only UTCTimes Please..."
```

{$ raw $}
```html
<h1>${ ioTime }<h1>
Diff ${ diffTime [ioTime, ioTime]}
```
{$ endraw $}

Retults in:

```html
<h1>2014-02-24 02:02:35.191664 UTC</h1>
Diff -0.000004s
```

### For loops

For loops are easy to do:

```haskell 
bucket :: MonadIO m => InputBucket m
bucket = bucketFromList [
          ("is", List $ map (LitVal . LitInteger) [1..5]),
        ]
```

{$ raw $}
```html
<ul>
  {$ for i in is $}
  <li> ${ i } </li>
  {$ endfor $}
</ul>
```
{$ endraw $}


### Parsing Control

You can use the `{$ raw $}{$ raw $}{$ endraw $}` tag to prevent the parser from parsing a part of the file.

{$ raw $}
```html
{$ raw $} ${ thisWontBeEvaluated } {$ endraw $}{$ endraw $}
```


Or you can use the `{$ raw $}{$ comment $}{$ endraw $}` tag to skip over that part of the file altogether.

{$ raw $}
```html
{$ comment $} This wont show. ${ thisWontShowAtAll } neither will this. {$ endcomment $}
```
{$ endraw $}



### In template declarations

At the start of every template, block, or forloop, you can define template variables with a let tag.

{$ raw $}
```html
{$ let time = ioTime $}

${ time }

<ul>
  {$ for i in is $}
  {$ let val = someFunc i $}
  <li> ${ val } </li>
  {$ endfor $}
</ul>
```
{$ endraw $}


### Includes

You can easily include other templates.

includes.strp
```html 
Other Template
```

{$ raw $}
```html
This is a template that calls another.
The other template: {$ include includes.strp $}
```
{$ endraw $}

Result:

```html
This is a template that calls another.
The other template: Other Template
```


### Inheritance

Any block, forloop, or template can inherit from another template. This allows you to specify a base template with `block` tags that will get filled by content defined in `isblock`. If an `inherits` tag is encountered, only `isblock` tags will be allowed at that level. 

{$ raw $}
base.strp
```html
This is a base template
${ time }
{$ block title $} Default Title {$ endblock $}
{$ block body $} Default Body {$ endblock $}
```
{$ endraw $}

{$ raw $}
```html
{$ let time = ioTime $}
{$ inherits base.strp $}

{$ isblock title $}Block title!!{$ endisblock $}
{$ isblock title $}Block Body!!{$ endisblock $}
```
{$ endraw $}

Here is an example of using inheritence at different levels:

{$ raw $}
```html
{$ let time = ioTime $}

{$ inherits base.strp $}

{$ isblock title $}Outside of loop{$ endisblock $}

{$ isblock body $}
  {$ for i in is $}
    {$ inherits base.strp $}
    {$ isblock title $}Inside loop{$ endisblock $}
    {$ isblock body $}
      Called from for loop ${ i }
    {$ endisblock $}
  {$ endfor $}
{$ endisblock $}
```
{$ endraw $}

Extending the template language with custom parsers and blocks
==============================================================

Strapped lets you define custom parsers to use to parse and render. You have to define both how to parse your data out of a template with Parsec and how to process it when it is rendered.

Theoretically this means you can build an entirely new template syntax within Strapped.

```haskell
${ fromFile "examples/custom_parser.hs" }
```



Speed
=====

Speed has taken a backseat to usability at this point in development.